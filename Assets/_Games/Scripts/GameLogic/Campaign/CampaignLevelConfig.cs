using Sirenix.OdinInspector;
using Sirenix.Utilities;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UIElements;
#if UNITY_EDITOR
using UnityEditor;
#endif
[CreateAssetMenu(fileName = "LevelConfig",menuName = "LevelConfig/CampaingLevelConfig")]
[GlobalConfig("Assets/Resources/GlobalConfig/")]
public class CampaignLevelConfig : GlobalConfig<CampaignLevelConfig> {
    public List<EnemyWorldList> EnemyConfigList = new();
    [TableList]
    public List<DifficultyLevelConfig> LevelConfigs = new();
#if UNITY_EDITOR
    [Button]
    public void AutoGenerateDifficultyLevel() {
        DifficultyLevelConfig difficultyLevelConfig = new();
        difficultyLevelConfig.GenerateLevelConfig(LevelConfigs.Count);
        LevelConfigs.Add(difficultyLevelConfig);
        EditorUtility.SetDirty(this);
        AssetDatabase.SaveAssets();
        AssetDatabase.Refresh();
    }
    [Button]
    public void Clear() {
        LevelConfigs.Clear();
        EditorUtility.SetDirty(this);
        AssetDatabase.SaveAssets();
        AssetDatabase.Refresh();
    }
#endif
    public WaveConfig GetWaveConfig(InGameLevel igl) {
        return GetLevelConfig(igl.d,igl.l).GetStageEnemyConfig(igl.s);
    }
    public LevelEnemyConfig GetLevelConfig(int dif,int level) {
        return GetDifficultyLevelConfig(dif).GetLevelEnemyConfig(level-1);
    }
    public DifficultyLevelConfig GetDifficultyLevelConfig(int dif) {
        return LevelConfigs[dif];
    }
}
[System.Serializable]
public class DifficultyLevelConfig {
    [TableColumnWidth(100,Resizable = false)]
    public DifficultyLevel difficultyLevel;
    [TableList]
    public List<LevelEnemyConfig> LevelConfigList = new();
    public void GenerateLevelConfig(int dif) {
        LevelConfigList.Clear();
        difficultyLevel = (DifficultyLevel)dif;
        for(int i = 0;i < 10;i++) {
            LevelEnemyConfig CEC = new();
            CEC.Generate();
            CEC.level = "Level " + (i + 1).ToString();
            LevelConfigList.Add(CEC);
        }
    }
    public LevelEnemyConfig GetLevelEnemyConfig(int level) {
        return LevelConfigList[level];
    }
}
[System.Serializable]
public class LevelEnemyConfig {
    [TableColumnWidth(60,Resizable = false)]
    public string level;

    [TableList]
    [LabelText("Stage Config")]
    public List<WaveConfig> StageConfig = new();
    public void Generate() {
        StageConfig.Clear();
        for(int i = 0;i < 10;i++) {
            WaveConfig wc = new();
            wc.GenerateWave(i);
            wc.stage = "Stage " + (i + 1).ToString();
            StageConfig.Add(wc);
        }
    }
     public WaveConfig GetStageEnemyConfig(int stage) {
        return StageConfig[stage-1];
     }
}
[System.Serializable]
public class WaveConfig {
    [TableColumnWidth(70,Resizable = false)]
    public string stage;

    [LabelText("Enemy List")]
    public List<string> enemyList = new();
    public void GenerateWave(int stage) {
        enemyList.Clear();
        int TypeNumber = Random.Range(1, 3);
        //List<string> en = new() { "Enemy_W1","Enemy_Arc1","Enemy_P1","Enemy_M1","Enemy_Boss1" };
        List<string> en = new(CampaignLevelConfig.Instance.EnemyConfigList[0].enemyWorldConfig[0].enemyName);
        en.RemoveAt(en.Count - 1);
        for(int i = 0;i < TypeNumber;i++) {
            int ran = Random.Range(0,en.Count);
            string enemyName = en[ran];
            en.RemoveAt(ran);
            enemyList.Add(enemyName);
        }
    }
    public int GetTypeNumber() {
        return enemyList.Count;
    }
}
[System.Serializable]
public class EnemyWorldList {
    public List<EnemyNameList> enemyWorldConfig = new();
}
[System.Serializable] 
public class EnemyNameList {
    public List<string> enemyName = new();
}
